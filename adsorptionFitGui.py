# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'adsorption_fit_gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import adsorptionFitClass
import numpy as np
import os
import sys


class Worker(QtCore.QThread):
    def __init__(self):
        super(Worker,self).__init__()
    def run(self):
        pass
    def stop(self):
        self.terminate()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Adsorption profile fit")
        MainWindow.resize(800, 585)
        self.configFileName = 'parameters.log'

        

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.inputfileLabel = QtWidgets.QLabel(self.centralwidget)
        self.inputfileLabel.setGeometry(QtCore.QRect(530, 30, 61, 21))
        self.inputfileLabel.setObjectName("inputfileLabel")
        self.outputLabel = QtWidgets.QLabel(self.centralwidget)
        self.outputLabel.setGeometry(QtCore.QRect(50, 350, 121, 181))
        self.outputLabel.setObjectName("outputLabel")
        font = QtGui.QFont()
        font.setPointSize(14)
        self.outputLabel.setFont(font)
        self.scipylabel = QtWidgets.QLabel(self.centralwidget)
        self.scipylabel.setGeometry(QtCore.QRect(250, 500, 150, 60))
        self.scipylabel.setObjectName("scipylabel")

        self.InputFile = QtWidgets.QLineEdit(self.centralwidget)
        self.InputFile.setGeometry(QtCore.QRect(20, 30, 471, 25))
        self.InputFile.setObjectName("InputFile")
        self.InputFile.setEnabled(False)
        
        self.inputFileButton = QtWidgets.QPushButton(self.centralwidget)
        self.inputFileButton.setObjectName('inputFileButton')
        self.inputFileButton.setGeometry(500,30,20,20)
        self.inputFileButton.setText('...')

        self.InputType = QtWidgets.QComboBox(self.centralwidget)
        self.InputType.setGeometry(QtCore.QRect(50, 110, 171, 22))
        self.InputType.setEditable(False)
        self.InputType.setObjectName("InputType")
        self.InputType.addItem("")
        self.InputType.addItem("")
        self.InputTypeLabel = QtWidgets.QLabel(self.centralwidget)
        self.InputTypeLabel.setGeometry(QtCore.QRect(230, 100, 101, 31))
        self.InputTypeLabel.setObjectName("InputTypeLabel")
        self.MinMaxRefine = QtWidgets.QComboBox(self.centralwidget)
        self.MinMaxRefine.setGeometry(QtCore.QRect(50, 180, 161, 22))
        self.MinMaxRefine.setObjectName("MinMaxRefine")
        self.MinMaxRefine.addItem("")
        self.MinMaxRefine.addItem("")
        self.MinMaxLabel = QtWidgets.QLabel(self.centralwidget)
        self.MinMaxLabel.setGeometry(QtCore.QRect(220, 180, 151, 21))
        self.MinMaxLabel.setScaledContents(False)
        self.MinMaxLabel.setObjectName("MinMaxLabel")
        self.ModelType = QtWidgets.QComboBox(self.centralwidget)
        self.ModelType.setGeometry(QtCore.QRect(25, 250, 190, 22))
        self.ModelType.setObjectName("ModelType")
        self.ModelType.addItem("")
        self.ModelType.addItem("")
        self.ModelType.addItem("")
        font = QtGui.QFont()
        font.setPointSize(12)
        self.ModelTypeLabel = QtWidgets.QLabel(self.centralwidget)
        self.ModelTypeLabel.setGeometry(QtCore.QRect(220, 210, 200, 100))
        self.ModelTypeLabel.setObjectName("ModelTypeLabel")
        self.ModelTypeLabel.setFont(font)
        self.optimiseButton = QtWidgets.QPushButton(self.centralwidget)
        self.optimiseButton.setGeometry(QtCore.QRect(590, 490, 91, 23))
        self.optimiseButton.setObjectName("optimiseButton")

        self.deltaHainit = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.deltaHainit.setGeometry(QtCore.QRect(440, 100, 60, 31))
        self.deltaHainit.setObjectName("deltaHainit")
        self.deltaHainit.setMaximum(10**6)
        self.deltaHainit.setMinimum(-10**6)
        self.deltaHainit.adjustSize()

        self.deltaSaInit = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.deltaSaInit.setGeometry(QtCore.QRect(440, 140, 60, 31))
        self.deltaSaInit.setObjectName("deltaSaInit")
        self.deltaSaInit.setMinimum(-10**5)
        self.deltaSaInit.setMaximum(10**5)
        self.deltaSaInit.adjustSize()

        self.deltaHbinit = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.deltaHbinit.setGeometry(QtCore.QRect(440, 180, 60, 31))
        self.deltaHbinit.setObjectName("deltaHbinit")
        self.deltaHbinit.setMaximum(10**5)
        self.deltaHbinit.setMinimum(-10**5)
        self.deltaHbinit.adjustSize()

        self.deltaSbInit = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.deltaSbInit.setGeometry(QtCore.QRect(440, 220, 60, 31))
        self.deltaSbInit.setObjectName("deltaSbInit")
        self.deltaSbInit.setMaximum(10**5)
        self.deltaSbInit.setMinimum(-10**5)
        self.deltaSbInit.adjustSize()

        self.Jinit = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.Jinit.setGeometry(QtCore.QRect(440, 260, 60, 31))
        self.Jinit.setObjectName("Jinit")
        self.Jinit.setMinimum(-10**5)
        self.Jinit.setMaximum(10**5)
        self.Jinit.adjustSize()

        self.J1init = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.J1init.setGeometry(QtCore.QRect(440, 300, 60, 31))
        self.J1init.setObjectName("J1init")
        self.J1init.setMinimum(-10**5)
        self.J1init.setMaximum(10**5)
        self.J1init.adjustSize()



        self.minadsinit = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.minadsinit.setGeometry(QtCore.QRect(440, 340, 60, 31))
        self.minadsinit.setObjectName("minadsinit")
        self.minadsinit.setMinimum(-10)
        self.minadsinit.setMaximum(10**5)
        self.minadsinit.adjustSize()

        self.maxadsinit = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.maxadsinit.setGeometry(QtCore.QRect(440, 380, 60, 31))
        self.maxadsinit.setObjectName("maxadsinit")
        self.maxadsinit.setMinimum(-10)
        self.maxadsinit.setMaximum(10**5)
        self.maxadsinit.adjustSize()

        self.Hai = -5000
        self.Hbi = -5000
        self.Sai = -50
        self.Sbi = -50
        self.Ji = 0
        self.J1i = 0
        self.minadsi = 0
        self.maxadsi = 1

        self.deltaHainit.setValue( self.Hai)
        self.deltaSaInit.setValue( self.Sai)
        self.deltaHbinit.setValue( self.Hbi)
        self.deltaSbInit.setValue( self.Sbi)
        self.Jinit.setValue( self.Ji)
        self.J1init.setValue( self.J1i)
        self.minadsinit.setValue( self.minadsi)
        self.maxadsinit.setValue( self.maxadsi)

        self.deltaHalabel = QtWidgets.QLabel(self.centralwidget)
        self.deltaHalabel.setGeometry(QtCore.QRect(380, 105, 47, 13))
        self.deltaHalabel.setObjectName("deltaHalabel")

        self.initialvalueslabel = QtWidgets.QLabel(self.centralwidget)
        self.initialvalueslabel.setGeometry(QtCore.QRect(380, 70, 121, 16))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.initialvalueslabel.setFont(font)
        self.initialvalueslabel.setObjectName("initialvalueslabel")
        self.deltaSalabel = QtWidgets.QLabel(self.centralwidget)
        self.deltaSalabel.setGeometry(QtCore.QRect(380, 145, 47, 13))
        self.deltaSalabel.setObjectName("deltaSalabel")
        self.deltaHblabel = QtWidgets.QLabel(self.centralwidget)
        self.deltaHblabel.setGeometry(QtCore.QRect(380, 185, 47, 13))
        self.deltaHblabel.setObjectName("deltaHblabel")
        self.deltaSblabel = QtWidgets.QLabel(self.centralwidget)
        self.deltaSblabel.setGeometry(QtCore.QRect(380, 225, 47, 13))
        self.deltaSblabel.setObjectName("deltaSblabel")
        self.Jlabel = QtWidgets.QLabel(self.centralwidget)
        self.Jlabel.setGeometry(QtCore.QRect(400, 265, 21, 16))
        self.Jlabel.setObjectName("Jlabel")
        self.J1label = QtWidgets.QLabel(self.centralwidget)
        self.J1label.setGeometry(QtCore.QRect(400, 305, 21, 16))
        self.J1label.setObjectName("J1label")
        self.Jlabel.setObjectName("Jlabel")

        self.J1description = QtWidgets.QLabel(self.centralwidget)
        self.J1description.setGeometry(QtCore.QRect(700, 285, 80, 45))
        self.J1description.setObjectName("J1description")

        self.minadslabel = QtWidgets.QLabel(self.centralwidget)
        self.minadslabel.setGeometry(QtCore.QRect(380, 345, 47, 13))
        self.minadslabel.setObjectName("minadslabel")
        self.maxadslabel = QtWidgets.QLabel(self.centralwidget)
        self.maxadslabel.setGeometry(QtCore.QRect(380, 385, 47, 13))
        self.maxadslabel.setObjectName("maxadslabel")

        self.updateInitialValuesButton = QtWidgets.QPushButton(self.centralwidget)
        self.updateInitialValuesButton.setGeometry(QtCore.QRect(430, 490, 111, 23))
        self.updateInitialValuesButton.setObjectName("updateInitialValuesButton")
        self.deltaHbLowbound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.deltaHbLowbound.setGeometry(QtCore.QRect(530, 180, 51, 31))
        self.deltaHbLowbound.setObjectName("deltaHbLowbound")
        self.deltaHbLowbound.setMinimum(-10**6)
        self.deltaHbLowbound.setMaximum(10**6)
        self.deltaHbLowbound.adjustSize()

        self.deltaHaLowbound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.deltaHaLowbound.setGeometry(QtCore.QRect(530, 100, 51, 31))
        self.deltaHaLowbound.setObjectName("deltaHaLowbound")
        self.deltaHaLowbound.setMinimum(-10**6)
        self.deltaHaLowbound.setMaximum(10**6)
        self.deltaHaLowbound.adjustSize()

        self.deltaSbLowbound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.deltaSbLowbound.setGeometry(QtCore.QRect(530, 220, 51, 31))
        self.deltaSbLowbound.setObjectName("deltaSbLowbound")
        self.deltaSbLowbound.setMinimum(-10**5)
        self.deltaSbLowbound.setMaximum(10**5)
        self.deltaSbLowbound.adjustSize()

        self.maxadsLowbound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.maxadsLowbound.setGeometry(QtCore.QRect(530, 380, 51, 31))
        self.maxadsLowbound.setObjectName("maxadsLowbound")
        self.maxadsLowbound.setMinimum(0)
        self.maxadsLowbound.setMaximum(10**5)
        self.maxadsLowbound.adjustSize()

        self.deltaSaLowbound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.deltaSaLowbound.setGeometry(QtCore.QRect(530, 140, 51, 31))
        self.deltaSaLowbound.setObjectName("deltaSaLowbound")
        self.deltaSaLowbound.setMinimum(-10**5)
        self.deltaSaLowbound.setMaximum(10**5)
        self.deltaSaLowbound.adjustSize()

        self.minadsLowbound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.minadsLowbound.setGeometry(QtCore.QRect(530, 340, 51, 31))
        self.minadsLowbound.setObjectName("minadsLowbound")
        self.minadsLowbound.setMinimum(-10)
        self.minadsLowbound.setMaximum(10**5)
        self.minadsLowbound.adjustSize()

        self.JLowbound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.JLowbound.setGeometry(QtCore.QRect(530, 260, 51, 31))
        self.JLowbound.setObjectName("JLowbound")
        self.JLowbound.setMinimum(-10**5)
        self.JLowbound.setMaximum(10**5)
        self.JLowbound.adjustSize()

        self.J1Lowbound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.J1Lowbound.setGeometry(QtCore.QRect(530, 300, 51, 31))
        self.J1Lowbound.setObjectName("J1Lowbound")
        self.J1Lowbound.setMinimum(-10**5)
        self.J1Lowbound.setMaximum(10**5)
        self.J1Lowbound.adjustSize()

        self.deltaSbHighBound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.deltaSbHighBound.setGeometry(QtCore.QRect(620, 220, 51, 31))
        self.deltaSbHighBound.setObjectName("deltaSbHighBound")
        self.deltaSbHighBound.setMinimum(-10**5)
        self.deltaSbHighBound.setMaximum(10**5)
        self.deltaSbHighBound.adjustSize()

        self.JHighbound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.JHighbound.setGeometry(QtCore.QRect(620, 260, 51, 31))
        self.JHighbound.setObjectName("JHighbound")
        self.JHighbound.setMinimum(-10**5)
        self.JHighbound.setMaximum(10**5)
        self.JHighbound.adjustSize()
        
        self.J1Highbound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.J1Highbound.setGeometry(QtCore.QRect(620, 300, 51, 31))
        self.J1Highbound.setObjectName("JHighbound")
        self.J1Highbound.setMinimum(-10**5)
        self.J1Highbound.setMaximum(10**5)
        self.J1Highbound.adjustSize()

        self.minadsHighbound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.minadsHighbound.setGeometry(QtCore.QRect(620, 340, 51, 31))
        self.minadsHighbound.setObjectName("minadsHighbound")
        self.minadsHighbound.setMinimum(0)
        self.minadsHighbound.setMaximum(10**5)
        self.minadsHighbound.adjustSize()

        self.deltaSaHighbound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.deltaSaHighbound.setGeometry(QtCore.QRect(620, 140, 51, 31))
        self.deltaSaHighbound.setObjectName("deltaSaHighbound")
        self.deltaSaHighbound.setMinimum(-10**5)
        self.deltaSaHighbound.setMaximum(10**5)
        self.deltaSaHighbound.adjustSize()

        self.deltaHbHighbound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.deltaHbHighbound.setGeometry(QtCore.QRect(620, 180, 51, 31))
        self.deltaHbHighbound.setObjectName("deltaHbHighbound")
        self.deltaHbHighbound.setMinimum(-10**6)
        self.deltaHbHighbound.setMaximum(10**6)
        self.deltaHbHighbound.adjustSize()

        self.deltaHaHighbound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.deltaHaHighbound.setGeometry(QtCore.QRect(620, 100, 51, 31))
        self.deltaHaHighbound.setObjectName("deltaHaHighbound")
        self.deltaHaHighbound.setMinimum(-10**6)
        self.deltaHaHighbound.setMaximum(10**6)
        self.deltaHaHighbound.adjustSize()

        self.maxadsHighbound = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.maxadsHighbound.setGeometry(QtCore.QRect(620, 380, 51, 31))
        self.maxadsHighbound.setObjectName("maxadsHighbound")
        self.maxadsHighbound.setMinimum(0)
        self.maxadsHighbound.setMaximum(10**5)
        self.maxadsHighbound.adjustSize()

        self.deltaHbLowbound.setValue(-50000)
        self.deltaHaLowbound.setValue(-50000)
        self.deltaSbLowbound.setValue(-500)
        self.maxadsLowbound.setValue(0)
        self.deltaSaLowbound.setValue(-500)
        self.minadsLowbound.setValue(-1)
        self.JLowbound.setValue(-1000)
        self.J1Lowbound.setValue(-1000)

        self.deltaSbHighBound.setValue(100)
        self.JHighbound.setValue(10000)
        self.J1Highbound.setValue(10000)
        self.minadsHighbound.setValue(0)
        self.deltaSaHighbound.setValue(100)
        self.deltaHbHighbound.setValue(500)
        self.deltaHaHighbound.setValue(500)
        self.maxadsHighbound.setValue(20)

        self.boundsLabel = QtWidgets.QLabel(self.centralwidget)
        self.boundsLabel.setGeometry(QtCore.QRect(550, 70, 121, 16))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.boundsLabel.setFont(font)
        self.boundsLabel.setObjectName("boundsLabel")

        self.tempUnit = QtWidgets.QComboBox(self.centralwidget)
        self.tempUnit.setGeometry(QtCore.QRect(50, 310, 69, 22))
        self.tempUnit.setObjectName("tempUnit")
        self.tempUnit.addItem("")
        self.tempUnit.addItem("")
        self.tempUnitLabel = QtWidgets.QLabel(self.centralwidget)
        self.tempUnitLabel.setGeometry(QtCore.QRect(140, 310, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.tempUnitLabel.setFont(font)
        self.tempUnitLabel.setObjectName("tempUnitLabel")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        self.menufile = QtWidgets.QMenu(self.menubar)
        self.menufile.setObjectName("menufile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionopen = QtWidgets.QAction(MainWindow)
        self.actionopen.setObjectName("actionopen")
        self.menufile.addAction(self.actionopen)
        self.menubar.addAction(self.menufile.menuAction())

        
        
        
        self.retranslateUi(MainWindow)
        self.InputType.setCurrentIndex(0)
        self.updateParamDct()
        if os.path.exists(self.configFileName):
            self.readConfig()
        self.updateConfig()
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.InputType.currentTextChanged.connect(self.del_item_in_combobox)

        self.optimiseButton.clicked.connect(self.click_optimise)
        self.updateInitialValuesButton.clicked.connect(self.click_update)
        self.actionopen.triggered.connect(self.open_file)
        self.inputFileButton.clicked.connect(self.open_file)
        

    def del_item_in_combobox(self):
        if self.InputType.currentText() == "Two sites":
            self.ModelType.clear()
            self.ModelType.addItem("")
            self.ModelType.addItem("")
            self.ModelType.setItemText(0, "Two sites, intra-pore interaction")
            self.ModelType.setItemText(1,"Two sites, inter-pore interaction")
        elif self.InputType.currentText() == 'Single site':
            self.ModelType.clear()
            self.ModelType.addItem("")
            self.ModelType.addItem("")
            self.ModelType.addItem("")

            self.ModelType.setItemText(0,  "Simple single site")
            self.ModelType.setItemText(1,  "Single site cooperative")
            self.ModelType.setItemText(2, "Two sites, intra-pore interaction")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Adsorption profile fit"))
        self.inputfileLabel.setText(_translate("MainWindow", "Input File"))
        self.InputFile.setText(_translate("MainWindow", "Ar_occupancy_1bar.txt"))

        output_string = ("deltaH = \n"
        "deltaS = \n"
        "J = \n"
        "min. ads. = \n"
        "max. ads. = ")

        self.outputLabel.setText(_translate("MainWindow", output_string))

        self.InputType.setCurrentText(_translate("MainWindow", "Single site"))
        self.InputType.setItemText(0, _translate("MainWindow", "Single site"))
        self.InputType.setItemText(1, _translate("MainWindow", "Two sites"))
        self.InputTypeLabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt;\">input type</span></p></body></html>"))
        self.MinMaxRefine.setItemText(0, _translate("MainWindow", "Off"))
        self.MinMaxRefine.setItemText(1, _translate("MainWindow", "On"))
        self.MinMaxLabel.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt;\">min. max. refine</span></p></body></html>"))

        self.ModelType.setItemText(0, _translate("MainWindow", "Simple single site"))
        self.ModelType.setItemText(1, _translate("MainWindow", "Single site cooperative"))

        self.tempUnit.setItemText(0, _translate("MainWindow", "°C"))
        self.tempUnit.setItemText(1, _translate("MainWindow", "K"))
        self.tempUnit.setCurrentIndex(1)
        self.tempUnitLabel.setText(_translate("MainWindow", "Temperature Unit"))

        self.ModelType.setItemText(2, _translate("MainWindow", "Two sites, intra-pore interaction"))
        self.ModelTypeLabel.setText(_translate("MainWindow", "Model type"))

        self.scipylabel.setText(_translate("MainWindow","Fitting done with SciPy,\ngui made with PyQt5"))

        self.optimiseButton.setText(_translate("MainWindow", "Run Fit"))
        self.menufile.setTitle(_translate("MainWindow", "File"))
        self.actionopen.setText(_translate("MainWindow", "Open"))
        self.actionopen.setShortcut(_translate("MainWindow", "Ctrl+O"))



        self.deltaHalabel.setText(_translate("MainWindow", "deltaHa"))
        self.initialvalueslabel.setText(_translate("MainWindow", "Initial Values"))
        self.deltaSalabel.setText(_translate("MainWindow", "deltaSa"))
        self.deltaHblabel.setText(_translate("MainWindow", "deltaHb"))
        self.deltaSblabel.setText(_translate("MainWindow", "deltaSb"))
        self.Jlabel.setText(_translate("MainWindow", "J"))
        self.J1label.setText(_translate("MainWindow", "J1"))
        self.J1description.setText(_translate("MainWindow", "for 2 site\ninterpore model"))
        self.minadslabel.setText(_translate("MainWindow", "min. ads."))
        self.maxadslabel.setText(_translate("MainWindow", "max. ads."))

        self.updateInitialValuesButton.setText(_translate("MainWindow", "Update initial values"))

        self.boundsLabel.setText(_translate("MainWindow", "Bounds"))




    def click_optimise(self):
        print('running optimisation')
        Halow = self.deltaHaLowbound.value()
        Hahigh = self.deltaHaHighbound.value()
        Salow = self.deltaSaLowbound.value()
        Sahigh = self.deltaSaHighbound.value()
        Hblow = self.deltaHbLowbound.value()
        Hbhigh = self.deltaHbHighbound.value()
        Sblow = self.deltaSbLowbound.value()
        Sbhigh = self.deltaSbHighBound.value()
        Jlow = self.JLowbound.value()
        Jhigh = self.JHighbound.value()
        J1low = self.J1Lowbound.value()
        J1high = self.J1Highbound.value()
        minadslow = self.minadsLowbound.value()
        minadshigh = self.minadsHighbound.value()
        maxadslow = self.maxadsLowbound.value()
        maxadshigh = self.maxadsHighbound.value()
        self.updateConfig()
        if self.tempUnit.currentText() == '°C':
            temperatureunit = 'C'
        elif self.tempUnit.currentText() == 'K':
            temperatureunit = 'K'
        if self.InputType.currentText() == 'Single site':
            ads_profile = adsorptionFitClass.One_site_adsorption_profile()
            try:
                ads_profile.read_file(file = self.InputFile.text(),unit = temperatureunit)
            except:
                print('couldn\'t read file')
                return
            ads_profile.H = self.deltaHainit.value()
            ads_profile.S = self.deltaSaInit.value()
            ads_profile.J = self.Jinit.value()
            ads_profile.minads = self.minadsinit.value()
            ads_profile.maxads = self.maxadsinit.value()
            ads_profile.Hb = self.deltaHbinit.value()
            ads_profile.Sb = self.deltaSbInit.value()

            if self.ModelType.currentText() == 'Simple single site':
                if self.MinMaxRefine.currentText() == 'Off':
                    bounds = ([Halow,Salow],[Hahigh,Sahigh])
                    x = np.array([ads_profile.H, ads_profile.S])
                elif self.MinMaxRefine.currentText() == 'On':
                    bounds = ([Halow,Salow,minadslow,maxadslow],[Hahigh,Sahigh,minadshigh,maxadshigh])
                    x = np.array([ads_profile.H, ads_profile.S,ads_profile.minads,ads_profile.maxads])
                ads_profile.run_optimise(x=x,bounds = bounds)
                ads_profile.ads_vant_hoff_plot()
                output_string = (f"deltaH = {ads_profile.H: .1f} J/mol\n"
                f"deltaS = {ads_profile.S :.2f} J/(mol K)\n"
                f"min. ads. = {ads_profile.minads :.3f}\n"
                f"max. ads = {ads_profile.maxads :.3f}")
            elif self.ModelType.currentText() == 'Single site cooperative':
                if self.MinMaxRefine.currentText() == 'Off':
                    bounds = ([Halow,Salow,Jlow],[Hahigh,Sahigh,Jhigh])
                    x = np.array([ads_profile.H, ads_profile.S, ads_profile.J])
                elif self.MinMaxRefine.currentText() == 'On':
                    bounds = ([Halow,Salow,Jlow,minadslow,maxadslow],[Hahigh,Sahigh,Jhigh,minadshigh,maxadshigh])
                    x = np.array([ads_profile.H, ads_profile.S, ads_profile.J,ads_profile.minads,ads_profile.maxads])
                ads_profile.run_coop_optimise(x = x,  bounds = bounds)
                ads_profile.one_site_coop_plot()
                output_string = (f"deltaH = {ads_profile.H: .1f} J/mol\n"
                f"deltaS = {ads_profile.S :.2f} J/(mol K)\n"
                f"J = {ads_profile.J :.1f} J/mol\n"
                f"min. ads. = {ads_profile.minads :.3f}\n"
                f"max. ads = {ads_profile.maxads :.3f}")
                
                self.Ji = f'{ads_profile.J:.1f}'

            elif self.ModelType.currentText() == 'Two sites, intra-pore interaction':
                if self.MinMaxRefine.currentText() == 'Off':
                    bounds = ([Halow,Hblow,Salow,Sblow,Jlow],[Hahigh,Hblow,Sahigh,Hbhigh,Jhigh])
                    x = np.array([ads_profile.H,ads_profile.Hb,ads_profile.S,ads_profile.Sb,ads_profile.J])
                elif self.MinMaxRefine.currentText() == 'On':
                    bounds = ([Halow,Hblow,Salow,Sblow,Jlow,minadslow,maxadslow],[Hahigh,Hbhigh,Sahigh,Hbhigh,Jhigh,minadshigh,maxadshigh])
                    x = np.array([ads_profile.H,ads_profile.Hb,ads_profile.S,ads_profile.Sb,ads_profile.J,ads_profile.minads,ads_profile.maxads])
                ads_profile.run_twosite_optimise(x=x, bounds = bounds)
                ads_profile.adsorption_plot()
                output_string = (f"deltaHa = {ads_profile.H: .1f} J/mol\n"
                f"deltaSa = {ads_profile.S :.2f} J/(mol K)\n"
                f"deltaHb = {ads_profile.Hb: .1f} J/mol\n"
                f"deltaSb = {ads_profile.Sb :.2f} J/(mol K)\n"
                f"J = {ads_profile.J :.1f} (J/mol)\n"
                f"min. ads. = {ads_profile.minads :.3f}\n"
                f"max. ads = {ads_profile.maxads :.3f}")
                self.Hbi = f"{ads_profile.Hb :.1f}"
                self.Sbi = f'{ads_profile.Sb :.2f}'
                self.Ji = f'{ads_profile.J :.1f}'


            self.outputLabel.setText(output_string)
            self.outputLabel.adjustSize()

            self.Hai =     ads_profile.H 
            self.Sai =     ads_profile.S 
            self.minadsi = ads_profile.minads 
            self.maxadsi = ads_profile.maxads 
        elif self.InputType.currentText() == 'Two sites':

            ads_profile = adsorptionFitClass.Two_site_adsorption_profile()
            try:
                ads_profile.read_file(file = self.InputFile.text())
            except:
                print('could\'t read file')
                return
            ads_profile.Ha = self.deltaHainit.value()
            ads_profile.Sa = self.deltaSaInit.value()
            ads_profile.Hb = self.deltaHbinit.value()
            ads_profile.Sb = self.deltaSbInit.value()
            ads_profile.Jab = self.Jinit.value()
            ads_profile.J1 = self.J1init.value()
            ads_profile.minads = self.minadsinit.value()
            ads_profile.maxads = self.maxadsinit.value()
            if self.ModelType.currentText() == 'Two sites, intra-pore interaction':
                if self.MinMaxRefine.currentText() == 'Off':
                    x = np.array([ads_profile.Ha,ads_profile.Hb, ads_profile.Sa,ads_profile.Sb, ads_profile.Jab])
                    bounds = ([Halow,Hblow,Salow,Sblow,Jlow],[Hahigh,Hbhigh,Sahigh,Sbhigh,Jhigh])

                elif self.MinMaxRefine.currentText() == 'On':
                    x = np.array([ads_profile.Ha,ads_profile.Hb, ads_profile.Sa,ads_profile.Sb, ads_profile.Jab,ads_profile.minads,ads_profile.maxads])
                    bounds = ([Halow,Hblow,Salow,Sblow,Jlow,minadslow,maxadslow],[Hahigh,Hbhigh,Sahigh,Sbhigh,Jhigh,minadshigh,maxadshigh])
                ads_profile.run_optimise(x = x,bounds = bounds)
                ads_profile.adsorption_plot()

                output_string = (f"deltaHa = {ads_profile.Ha: .1f} J/mol\n"
                f"deltaSa = {ads_profile.Sa :.2f} J/(mol K)\n"
                f"deltaHb = {ads_profile.Hb :.1f} J/mol\n"
                f"deltaSb = {ads_profile.Sb :.2f} J/(mol K)\n"
                f"Jab = {ads_profile.Jab :.1f} J/mol\n"
                f"min. ads. = {ads_profile.minads :.3f}\n"
                f"max. ads = {ads_profile.maxads :.3f}")
                self.outputLabel.setText(output_string)
                self.outputLabel.adjustSize()

                self.Hai =     ads_profile.Ha 
                self.Hbi =     ads_profile.Hb 
                self.Sai =     ads_profile.Sa 
                self.Sbi =     ads_profile.Sb 
                self.Ji =      ads_profile.Jab
                self.minadsi = ads_profile.minads 
                self.maxadsi = ads_profile.maxads 
            elif self.ModelType.currentText() == "Two sites, inter-pore interaction":
                print('two site inter-pore model can take several minutes')
                if self.MinMaxRefine.currentText() == 'Off':
                    x = np.array([ads_profile.Ha,ads_profile.Hb, ads_profile.Sa,ads_profile.Sb, ads_profile.Jab,ads_profile.J1])
                    bounds = ([Halow,Hblow,Salow,Sblow,Jlow,Jlow],[Hahigh,Hbhigh,Sahigh,Sbhigh,Jhigh,Jhigh])
                elif self.MinMaxRefine.currentText() == 'On':
                    x = np.array([ads_profile.Ha,ads_profile.Hb, ads_profile.Sa,ads_profile.Sb, ads_profile.Jab,ads_profile.J1,ads_profile.minads,ads_profile.maxads])
                    bounds = ([Halow,Hblow,Salow,Sblow,Jlow,Jlow,minadslow,maxadslow],[Hahigh,Hbhigh,Sahigh,Sbhigh,Jhigh,Jhigh,minadshigh,maxadshigh])
                ads_profile.run_twosite_inter_optimise(x = x,bounds = bounds)
                ads_profile.adsorption_plot_inter()
                output_string = (f"deltaHa = {ads_profile.Ha: .1f} J/mol\n"
                f"deltaSa = {ads_profile.Sa :.2f} J/(mol K)\n"
                f"deltaHb = {ads_profile.Hb :.1f} J/mol\n"
                f"deltaSb = {ads_profile.Sb :.2f} J/(mol K)\n"
                f"Jab = {ads_profile.Jab :.1f} J/mol\n"
                f"J1 = {ads_profile.J1 :.1f} J/mol\n"
                f"min. ads. = {ads_profile.minads :.3f}\n"
                f"max. ads = {ads_profile.maxads :.3f}")
                self.outputLabel.setText(output_string)
                self.outputLabel.adjustSize()

                self.Hai =     ads_profile.Ha
                self.Hbi =     ads_profile.Hb
                self.Sai =     ads_profile.Sa
                self.Sbi =     ads_profile.Sb
                self.Ji =      ads_profile.Jab
                self.J1i =     ads_profile.J1 
                self.minadsi = ads_profile.minads 
                self.maxadsi = ads_profile.maxads 



    def click_update(self):
        self.deltaHainit.setValue(self.Hai)
        self.deltaSaInit.setValue(self.Sai)
        self.deltaHbinit.setValue(self.Hbi)
        self.deltaSbInit.setValue(self.Sbi)
        self.Jinit.setValue(self.Ji)
        self.J1init.setValue(self.J1i)
        self.minadsinit.setValue(self.minadsi)
        self.maxadsinit.setValue(self.maxadsi)
        self.updateConfig()
    def open_file(self):

        #dialog.setFileMode(QtWidgets.QFileDialog.AnyFile)
        filter = "data file (*.txt *.dat *.xy *.xye *csv)"
        if os.path.dirname(self.InputFile.text()) == '':
            direc = os.path.dirname(os.path.realpath(__file__))
        else:
            direc = os.path.dirname(self.InputFile.text())
        dialog = QtWidgets.QFileDialog.getOpenFileName(caption = 'select data file',
        filter = filter,directory = direc)
        if dialog[0] != '':
            self.InputFile.setText(dialog[0])
        self.updateConfig()
    
    def updateParamDct(self):
        self.paramDct = {self.deltaHainit: [self.deltaHainit.objectName(),self.deltaHainit.value()],
                         self.deltaSaInit: [self.deltaSaInit.objectName(),self.deltaSaInit.value()],
                         self.deltaHbinit: [self.deltaHbinit.objectName(), self. deltaHbinit.value()],
                         self.deltaSbInit: [self.deltaSbInit.objectName(), self.deltaSbInit.value()],
                         self.Jinit: [self.Jinit.objectName(), self.Jinit.value()],
                         self.J1init: [self.J1init.objectName(),self.J1init.value()],
                         self.minadsinit: [self.minadsinit.objectName(), self.minadsinit.value()],
                         self.maxadsinit: [self.maxadsinit.objectName(), self.maxadsinit.value()],
                         self.InputFile: [self.InputFile.objectName(),self.InputFile.text()],
                         self.InputType: [self.InputType.objectName(), self.InputType.currentIndex()],
                         self.MinMaxRefine: [self.MinMaxRefine.objectName(), self.MinMaxRefine.currentIndex()],
                         self.tempUnit: [self.tempUnit.objectName(), self.tempUnit.currentIndex()],
                         self.minadsLowbound: [self.minadsLowbound.objectName(),self.minadsLowbound.value()],
                         self.minadsHighbound: [self.minadsHighbound.objectName(), self.minadsHighbound.value()],
                         self.maxadsLowbound:[self.maxadsLowbound.objectName(), self.maxadsLowbound.value()],
                         self.deltaHaLowbound: [self.deltaHaLowbound.objectName(), self.deltaHaLowbound.value()],
                         self.deltaHaHighbound: [self.deltaHaHighbound.objectName(), self.deltaHaHighbound.value()],
                         self.deltaSaLowbound: [self.deltaSaLowbound.objectName(), self.deltaSaLowbound.value()],
                         self.deltaSaHighbound: [self.deltaSaHighbound.objectName(), self.deltaSbHighBound.value()],
                         self.deltaHbLowbound: [self.deltaHbLowbound.objectName(), self.deltaHbLowbound.value()],
                         self.deltaSbLowbound: [self.deltaSbLowbound.objectName(), self.deltaSbLowbound.value()],
                         self.JLowbound: [self.JLowbound.objectName(), self.JLowbound.value()],
                         self.JHighbound: [self.JHighbound.objectName(), self.JHighbound.value()],
                         self.J1Lowbound: [self.J1Lowbound.objectName(), self.J1Lowbound.value()],
                         self.J1Highbound: [self.J1Highbound.objectName(), self.J1Highbound.value()],
                         self.ModelType: [self.ModelType.objectName(), self.ModelType.currentIndex()]}
    def updateConfig(self):
        self.updateParamDct()
        string = ''
        for item in self.paramDct:
            string += f'{self.paramDct[item][0]};{self.paramDct[item][1]}\n'
        f = open(self.configFileName,'w')
        f.write(string)
        f.close()
    def readConfig(self):
        f = open(self.configFileName,'r')
        lines = f.readlines()
        f.close()
        for line in lines:
            lsplit = line.split(';')
            name = lsplit[0]
            value = lsplit[1].replace('\n','')
            for item in self.paramDct:
                if name == self.paramDct[item][0]:
                    if type(item) == QtWidgets.QComboBox:
                        item.setCurrentIndex(int(value))
                    elif type(item) == QtWidgets.QTextEdit:
                        item.setText(value)
                    
def main():
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
if __name__ == "__main__":
    main()

